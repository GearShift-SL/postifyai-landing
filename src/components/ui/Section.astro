---
import type { FeatureSection as Props, Item } from '~/types';
import Button from './Button.astro';
import { Icon } from 'astro-icon/components';
import Image from '~/components/common/Image.astro';

import ItemGrid from './ItemGrid.astro';
import Headline from './Headline.astro';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  icon,
  points = [],
  image,
  isReversed = false,
  iconClass,
  callToAction,
  columns,
  dataAos,
} = Astro.props;

// Generate the Items from the points
// Points is just an array of strings

// Convert the array of points to an Item array
const items: Item[] = points.map((point) => ({ description: point }));
---

<div class={`md:flex ${isReversed ? 'md:flex-row-reverse' : ''} md:gap-16`}>
  <div class="md:basis-1/2 self-center">
    {
      callToAction && (
        <div class="mt-[-40px] mb-8 text-primary" data-aos={dataAos}>
          <Button variant="link" {...callToAction} />
        </div>
      )
    }

    {
      icon && (
        <div
          data-aos={dataAos}
          class="text-2xl flex items-center justify-center w-16 h-16 rounded-xl bg-gray-200/50 dark:bg-gray-700/50 text-blue-500 dark:text-gray-300 p-2 mb-4 border border-slate-600 dark:border-slate-200"
        >
          <Icon name={icon} class="w-8 h-8" />
        </div>
      )
    }

    <Headline
      dataAos={dataAos}
      title={title}
      subtitle={subtitle}
      classes={{
        container: 'max-w-xl sm:mx-auto lg:max-w-2xl',
        title: 'text-2xl md:text-3xl font-bold tracking-tighter mb-4 font-heading text-left',
        subtitle: 'max-w-3xl mx-auto sm:text-left text-xl text-muted dark:text-slate-300',
      }}
    />

    <div data-aos={dataAos}>
      <ItemGrid
        items={items}
        columns={columns}
        defaultIcon="tabler:check"
        classes={{
          container: `gap-y-2 md:gap-y-3`,
          panel: 'max-w-none',
          title: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
          description: 'max-w-3xl mx-auto sm:text-left text-xl text-muted dark:text-slate-300',
          icon: `${iconClass ?? 'flex h-8 w-8 items-center justify-center text-gray-700 dark:text-gray-300 p-1'}`,
          action: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
        }}
      />
    </div>
  </div>
  <div aria-hidden="true" class="mt-10 md:mt-0 md:basis-1/2" data-aos={dataAos}>
    {
      image && (
        <div class="relative h-full m-auto max-w-4xl">
          {typeof image === 'string' ? (
            <Fragment set:html={image} />
          ) : (
            <Image
              class="mx-auto w-full rounded-lg bg-white shadow-lg h-full object-cover"
              width={500}
              height={500}
              widths={[400, 768]}
              sizes="(max-width: 768px) 100vw, 432px"
              layout="responsive"
              {...image}
            />
          )}
        </div>
      )
    }
  </div>
</div>
